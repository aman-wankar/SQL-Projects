-- SELECT clause

-- Selecting all with *

SELECT * 
FROM classicmodels.offices;

-- Selecting with column names 

SELECT customernumber,
       customername
FROM   classicmodels.customers;
 
 -- WHERE Clause
 
SELECT employeenumber,
       firstname,
       lastname
FROM   classicmodels.employees
WHERE  jobTitle = 'Sales Rep'; 
 
-- ORDER BY

SELECT officecode,
       city,
       phone,
       country,
       postalcode
FROM   classicmodels.offices
WHERE  country = 'USA'
ORDER  BY postalcode; 

-- ASC Order
SELECT ordernumber,
       orderdate,
       customernumber
FROM   classicmodels.orders
ORDER  BY customernumber ASC; 

-- DESC Order

SELECT productcode,
       productname,
       quantityinstock
FROM   classicmodels.products
WHERE  productline = 'Motorcycles'
ORDER  BY quantityinstock DESC; 

SELECT *
FROM   classicmodels.customers
ORDER  BY customername ASC,
          contactfirstname DESC; 


-- Operators

SELECT productCode,
       buyPrice,
       MSRP,
       MSRP + 10                -- can also use -, *, /, % operators 
FROM   classicmodels.products;

-- Comparison Operators

SELECT customernumber,
       customername,
       creditlimit
FROM   classicmodels.customers 
WHERE  creditlimit < 100000;   -- >, <=, >=, = , != operators can be used

-- != operator Example

SELECT officecode,
       city,
       phone,
       country,
       postalcode
FROM   classicmodels.offices
WHERE  country != 'USA'
ORDER  BY postalcode; 

-- Using DATES with Operators

SELECT ordernumber,
       orderdate,
       customernumber
FROM   classicmodels.orders
WHERE  orderdate < '2003-12-31'; 

-- Logical Operators AND, OR, NOT

SELECT productcode,
       buyprice,
       msrp
FROM   classicmodels.products
WHERE  buyprice > 50 AND msrp >=70;


SELECT productCode,
       buyPrice,
       MSRP
FROM   classicmodels.products
WHERE  NOT (buyPrice > 50 );

SELECT customernumber,
       customername,
       phone,
       city,
       country
FROM   classicmodels.customers
WHERE  city = 'Las Vegas'
        OR city = 'Melbourne'; 
        
 SELECT customernumber,
       customername,
       phone,
       city,
       country
FROM   classicmodels.customers
WHERE  (country = 'Australia' OR country = 'USA')   -- with paraenthesis
        AND city = 'Las Vegas';        

 
 SELECT customernumber,
       customername,
       phone,
       city,
       country
FROM   classicmodels.customers
WHERE  country = 'Australia' OR country = 'USA'    -- without paraenthesis
        AND city = 'Las Vegas';        
-- Alias using AS keyword

SELECT productCode,
       buyPrice,
       MSRP,
       (MSRP + 10) AS "Increased MSRP"     -- can use Increased_Price without quotes
FROM   classicmodels.products; 

-- DISTINCT keyword

SELECT DISTINCT (orderlinenumber)
FROM   classicmodels.orderdetails
ORDER  BY orderlinenumber ASC; 

-- IN keyword

SELECT ordernumber,
       priceeach,
       quantityordered,
       orderlinenumber
FROM   classicmodels.orderdetails
WHERE  orderlinenumber IN ( 1, 2 )
ORDER  BY orderlinenumber; 

SELECT ordernumber,
       priceeach,
       quantityordered,
       orderlinenumber
FROM   classicmodels.orderdetails
WHERE  orderlinenumber NOT IN ( 1, 2 )
ORDER  BY orderlinenumber; 

-- BETWEEN keyword

SELECT *
FROM   classicmodels.payments
WHERE  amount BETWEEN 1000 AND 10000      -- same as amount <=1000 AND amount <= 10000

SELECT ordernumber,
       orderdate,
       requireddate,
       shippeddate,
       customernumber
FROM   classicmodels.orders
WHERE  orderdate BETWEEN '2003-01-01' AND '2004-01-01'    -- working with dates
ORDER  BY orderdate; 
	
-- LIKE Keyword

SELECT customernumber,
       customername,
       country
FROM   classicmodels.customers
WHERE  customername LIKE 'a%';     


SELECT customernumber,
       customername,
       country
FROM   classicmodels.customers
WHERE  customername LIKE '%e';     


SELECT customernumber,
       customername,
       country
FROM   classicmodels.customers
WHERE  customername LIKE '%a%';     


SELECT *
FROM   classicmodels.employees
WHERE  employeenumber LIKE '1%';          -- % matches any numbers of characters


SELECT *
FROM   classicmodels.employees
WHERE  employeenumber LIKE '_1%';        -- _ matches one number of characters

SELECT *
FROM   classicmodels.employees
WHERE  employeenumber LIKE '__1%';        


-- REGEXPs

SELECT *
FROM   classicmodels.employees
WHERE  lastname REGEXP 'te'; 

SELECT *
FROM   classicmodels.employees
WHERE  firstName REGEXP 'te|et'; 

SELECT customernumber,                                  
       customername,                                    
       addressline1                                     
FROM   classicmodels.customers                          
WHERE  addressline1 REGEXP '^a';              

SELECT customernumber,                                  
       customername,                                    
       addressline1                                     
FROM   classicmodels.customers                           
WHERE  addressline1 REGEXP 'r$';


SELECT customernumber,                                  --  ^ beginning
       customername,                                    --  $ ending
       addressline1                                     --  | logical OR to match two or more patterns
FROM   classicmodels.customers                          --  [] matches a set  
WHERE  addressline1 REGEXP '^b| [0-9]$';

-- NULL operator

SELECT *
FROM   classicmodels.orders
WHERE  comments IS  NULL;

SELECT *
FROM   classicmodels.orders
WHERE  comments IS NOT NULL;

 
-- LIMIT clause

SELECT *
FROM   classicmodels.payments
LIMIT  10; 

SELECT *
FROM   classicmodels.payments
LIMIT  6, 14;                            -- LIMIT offset, no. of records

-- JOINS
-- INNER JOINS

USE classicmodels;

SELECT *                                                  -- will retrieve all columns from two tables
FROM   classicmodels.customers
JOIN classicmodels.payments                               -- INNER keyword is optional
ON customers.customernumber = payments.customernumber ;

SELECT customername,                                             -- will retrieve selected columns from two tables
       contactfirstname,
       contactlastname,
       amount
FROM   classicmodels.customers
       JOIN classicmodels.payments
         ON customers.customernumber = payments.customernumber ;

SELECT p.customernumber,                                -- if we write only 'customerNumber' query will not understand 
       customername,                                    -- from which table it should retrieve 'customerNumber'
       contactfirstname,                                -- so we user alias
       contactlastname,
       amount
FROM   classicmodels.customers c
       JOIN classicmodels.payments p
         ON c.customernumber = p.customernumber;  
         
-- joining a table to itself

USE classicmodels;

SELECT e.employeenumber,
       e.firstname,
       m.firstname AS manager
FROM   employees e
       JOIN employees m
         ON e.reportsto = m.employeenumber; 
         

-- JOINING THREE TABLES


SELECT od.ordernumber,
       p.productname,
       o.status
FROM   classicmodels.orderdetails od                      -- 1000 rows
       JOIN classicmodels.products p                      -- 110  rows
         ON od.productcode = p.productcode                -- 1000 rows
       JOIN classicmodels.orders o                        -- 326  rows
         ON od.ordernumber = o.ordernumber;                -- 1000 rows

-- OUTER JOINS

-- outer keyword is optional if we user LEFT & RIGHT in clause

SELECT c.customernumber,
       c.customername,
       p.checknumber,
       paymentdate,
       amount
FROM   classicmodels.payments p
       RIGHT JOIN classicmodels.customers c
               ON p.customernumber = c.customernumber; 


SELECT c.customernumber,
       c.customername,
       p.checknumber,
       paymentdate,
       amount
FROM   classicmodels.payments p
       LEFT JOIN classicmodels.customers c
               ON p.customernumber = c.customernumber;                
               
-- USING keyword

SELECT customername,                                            
       contactfirstname,
       contactlastname,
       amount
FROM   classicmodels.customers
       JOIN classicmodels.payments
         USING (customernumber);

-- UNION kwyword - used to combine rows

-- if we want to mark current year's orders as "Active" 
-- and orders before current years as "Archived" we can do following

-- current year orders
SELECT ordernumber,
       orderdate,
       "active" AS status
FROM   classicmodels.orders
WHERE  orderdate >= '2005-01-01'

UNION

-- oreders before current year
SELECT ordernumber,
       orderdate,
       "active" AS status
FROM   classicmodels.orders
WHERE  orderdate <= '2005-01-01'; 

-- categorizing employees on the basis of extension

SELECT employeenumber,
       firstname,
       lastname,
       extension,
       "platinum" AS status
FROM   classicmodels.employees
WHERE  extension BETWEEN 'x100' AND 'x3000'
UNION
SELECT employeenumber,
       firstname,
       lastname,
       extension,
       "Gold" AS status
FROM   classicmodels.employees
WHERE  extension BETWEEN 'x3001' AND 'x5000'
UNION
SELECT employeenumber,
       firstname,
       lastname,
       extension,
       "Silver" AS status
FROM   classicmodels.employees
WHERE  extension BETWEEN 'x5001' AND 'x9999';

